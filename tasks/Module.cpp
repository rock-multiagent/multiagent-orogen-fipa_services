#include "Module.hpp"

#include <semaphore.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <unistd.h>

#include <message-generator/ACLMessageOutputParser.h>
#include <rtt/corba/ControlTaskProxy.hpp>
#include <rtt/corba/ControlTaskServer.hpp>
#include <rtt/NonPeriodicActivity.hpp>

#include "TypelibMarshallerBase.hpp"

#include "module_id.h"

namespace dc = dfki::communication;
namespace rc = RTT::Corba;

namespace root
{
////////////////////////////////////////////////////////////////////
//                           PUBLIC                               //
////////////////////////////////////////////////////////////////////
Module::Module(std::string const& name) : ModuleBase(name),
        fipa(),
        connections(),
        mta(NULL),
        loggerNames(),
        serviceDiscovery(NULL),
        transport(NULL),
        modID(name)
{
}

Module::~Module()
{
    if(serviceDiscovery != NULL)
    {
        delete serviceDiscovery;
        serviceDiscovery = NULL;
    }
    // Delete all the remote connections.
    std::map<std::string, ConnectionInterface*>::iterator it;
    for(it=connections.begin(); it != connections.end(); it++)
    {
        it->second->disconnect();
        delete(it->second);
        it->second = NULL;
    }
    connections.clear();
    // The mts-connection has been deleted as well.
    mta = NULL;
    stop();
    // See 'cleanupHook()'.
}

////////////////////////////////HOOKS///////////////////////////////
bool Module::configureHook()
{    
    // Set logger info.
    if (RTT::log().getLogLevel() < RTT::Logger::Info)
    {
        RTT::log().setLogLevel( RTT::Logger::Info );
    }
    // Set name of this task context.
    this->setName(_module_name.get());

    // Split and store module ID to envID, avahi type and name.
    modID = ModuleID(_module_name.get());

    // Configure SD.
    dc::ServiceConfiguration sc(_module_name.get(), _avahi_type.get(), _avahi_port.get());
    sc.setTTL(_avahi_ttl.get());
    serviceDiscovery = new dc::ServiceDiscovery();
    // conf.stringlist.push_back("Type=Basis");
    // Add calback functions.
    serviceDiscovery->addedComponentConnect(sigc::mem_fun(*this, 
        &Module::serviceAdded));
    serviceDiscovery->removedComponentConnect(sigc::mem_fun(*this, 
        &Module::serviceRemoved));
    // Start SD.
    try{
        serviceDiscovery->start(sc);
    } catch(exception& e) {
        globalLog(RTT::Error, "%s", e.what());
    }
    globalLog(RTT::Info, "Started service '%s' with avahi-type '%s'",
    _module_name.get().c_str(), _avahi_type.get().c_str());

    // Required?
    // Getting information for the type of the ports (fipa::BitefficientMessage)
    RTT::TypeInfo const* type = _inputPortMTS.getTypeInfo();
    transport = dynamic_cast<orogen_transports::TypelibMarshallerBase*>(
        type->getProtocol(orogen_transports::TYPELIB_MARSHALLER_ID));
    if (! transport)
    {
        // TODO change the log
        log(RTT::Error) << "cannot report ports of type " << type->getTypeName()
         << " as no toolkit generated by orogen defines it" << RTT::endlog();
    } 

    return true;
}

void Module::errorHook()
{
    globalLog(RTT::Error, "Entering error state.");
}

bool Module::startHook()
{
    return true;
}

void Module::updateHook(std::vector<RTT::PortInterface*> const& updated_ports)
{
    std::vector<RTT::PortInterface*>::const_iterator it;
    // Process message of all updated ports.
    for(it = updated_ports.begin(); it != updated_ports.end(); ++it)
    { 
        fipa::BitefficientMessage message;
        RTT::InputPortInterface* read_port = dynamic_cast<RTT::InputPortInterface*>(*it);
        ((RTT::InputPort<fipa::BitefficientMessage>*)read_port)->read(message);
        globalLog(RTT::Info, "Received new message on port %s of size %d", (*it)->getName().c_str(),
                message.size());
        std::string msg_str = message.toString();
        processMessage(msg_str);
    }
}

////////////////////////////////////////////////////////////////////
//                           PROTECTED                            //
////////////////////////////////////////////////////////////////////
void Module::globalLog(RTT::LoggerLevel log_type, const char* format, ...)
{
    int n = 100;	
	char buffer[512];
	va_list arguments;

	va_start(arguments, format);
	n = vsnprintf(buffer, sizeof(buffer), format, arguments);
	va_end(arguments);
    std::string msg(buffer);

    // Global log, sending message to all log-modules.
    if(loggerNames.size()) // Are log-modules active?
    {
        // Build logging string with 'RTT::Logger/modname/msg'.
        std::string log_msg = "x/" + this->getName() + "/" + msg;
        log_msg[0] = static_cast<int>(log_type); // log_type 0-6

        if(mta)
        {
            // Create message
            try {
                fipa.clear();
                fipa.setMessage("SENDER "+ this->getName() + 
                        "CONTENT START " + log_msg + " STOP");
                fipa.setParameter("RECEIVER", loggerNames);
                mta->send(fipa.encode());
            } catch (MessageException& e) {
                log(RTT::Warning) << "MessageException: " << e.what() << RTT::endlog();
            } catch (ConnectionException& e) {
                log(RTT::Warning) << "ConnectionException: " << e.what() << RTT::endlog();
            }
        }
    }
    // Local log.
    log(log_type) << msg << RTT::endlog();
}

////////////////////////////////RPC-METHODS//////////////////////////
bool Module::rpcCreateConnectPorts(std::string const& remote_name, 
        std::string const& remote_ior)
{
    // Return true if the connection have already be established.
    if(connections.find(remote_name) != connections.end())
    {
        globalLog(RTT::Warning, "Connection to '%s' already established", 
            remote_name.c_str());
        return true;
    }
    
    // Create the ports and the proxy and use the proxy to connect 
    // the local output to the remote input.
    CorbaConnection* con = new CorbaConnection(this, remote_name, remote_ior);
    try {
        con->connectLocal();
    } catch(ConnectionException& e) {
        globalLog(RTT::Error, "Connection to '%s' could not be established.", remote_name.c_str());
        return false;
    }

    connections.insert(pair<std::string, CorbaConnection*>(remote_name,con));
    globalLog(RTT::Info, "Connected to '%s'", remote_name.c_str());
    return true;
}

////////////////////////////////CALLBACKS///////////////////////////
void Module::serviceAdded_(dfki::communication::ServiceEvent& se)
{
    std::string id = se.getServiceDescription().getName();

    std::map<std::string, ConnectionInterface*>::iterator it;
    it = connections.find(id);

    if(it == connections.end())
    {
        log(RTT::Info) << "Connection to " << id << " already established." 
                << RTT::endlog();
        return;
    }

    ModuleID mod(id);
    std::string remoteIOR = se.getServiceDescription().getDescription("IOR");

    // Connect to the first appropriate MTA (same environment ids).  
    if(mta == NULL && (mod.getType() == "MTA" && mod.getEnvID() == this->modID.getEnvID()))
    {
        CorbaConnection* cc = new CorbaConnection(this, id, remoteIOR);
        try{
            cc->connect();
        } catch(ConnectionException& e) {
            log(RTT::Info) << "ConnectionException: " << e.what() << RTT::endlog();
            return;        
        }
        connections.insert(pair<std::string, CorbaConnection*>(id,cc));
    }

    // Build up a list with all the logging-module-IDs.  
    if(mod.getType() == "LOG")
    {
        loggerNames.push_back(id);
    }
}

void Module::serviceRemoved_(dfki::communication::ServiceEvent& se)
{
    // Do nothing if no connection is available.
    std::string id = se.getServiceDescription().getName();
    std::map<std::string, ConnectionInterface*>::iterator it = connections.find(id);
    if(it == connections.end()) // No connection to 'id' available.
        return;

    ModuleID mod(id);

    // If its the MTA of this module, remove shortcut.
    if(mod.getType() == "MTA" && mod.getEnvID() == this->modID.getEnvID())
    {
        mta = NULL;
        globalLog(RTT::Warning, "My MTA has been removed.");
    } 

    // If its a logging module, remove entry in the logger list.
    if(mod.getType() == "LOG")
    {
        std::vector<std::string>::iterator it=loggerNames.begin();
        for(; it!=loggerNames.end(); ++it)
        {
            if(*it == id)
            {
                loggerNames.erase(it);
                break;
            }
        }
    }

    // Disconnect and delete.
    it->second->disconnect();
    connections.erase(it);
}

////////////////////////////////////////////////////////////////////
//                           PRIVATE                              //
////////////////////////////////////////////////////////////////////
void Module::serviceAdded(dfki::communication::ServiceEvent se)
{
    serviceAdded_(se);
}

void Module::serviceRemoved(dfki::communication::ServiceEvent se)
{
    serviceRemoved_(se);
}
} // namespace modules

