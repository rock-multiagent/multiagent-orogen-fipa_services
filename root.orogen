name 'root'

version '0.1'
# Find documentation at http://www.rock-robotics.org
version '0.2'
# Switched to orogen for all modules. Because of that the
# namespace name of every module has to be unique. So, the namespace
# name will describe the module, the class name will always be 'Module'.
version '0.3'

import_types_from "tasks/connections/fipa_msg_object.h"

using_library "fipa_acl"
using_library "service_discovery"
using_library "typelib"
using_library "numeric"

import_types_from "base"
import_types_from "PortStatsTypes.hpp"

# The root module serves as basis for all components that require an
# automatic connection to a FIPA 'message bus'.
#
# The FIPA message bus relies on the application of so called MTA's
# (Message Transport Agent aka Message Transport Service) - mainly to allow
# for inter-robot communication.
# 
# One MTA per robot/environment is responsible for delivering message 
# to a set of components, here identified by an environment id as part
# which is part of the components name: <env-id>_<type>. 
#
# An MTA will be recognized by its type suffix: <env-id>_MTA, where
# the <env-id> follows <robot-type>_<id> (thus the second underscore 
# separates <env-id> and <type>, e.g. crex_0_MTA)
#
# Sending messages:
# Components that inherit from the root module, will be automatically
# connected to the MTA of their environment. Message can be send
# using the member 'mta', i.e.
#
# if(mta)
# {
#     mta->send( encodedFIPAMsg /** string as byte array container **/);
# }
#
#
# Warning: root modules and derived components should *NOT* be started with
# the '--sd-domain' option. Instead the property 'avahi_type' should be used, 
# to set domain and type (_udp,_tcp).
# Otherwise a runtime condition exists between receiving events from the 
# underlying service_discovery and registering callbacks for these events. 
# !! -- this requires to be fixed in upcoming versions -- !!
task_context "Module" do
    needs_configuration

    property('module_name', 'std::string').
        doc 'Name of the module.'

    property('avahi_type', 'std::string').
        doc 'Type of the service. Default is \'_rimres._tcp\'.'

    property('avahi_port', 'int').
        doc 'Port of the service. Default is 12000.'

    property('avahi_ttl', 'int').
        doc 'Time-To-Live. Default is 0.'

    dynamic_input_port(/\w+\-\>\w+/, "/fipa/BitefficientMessage").
        doc("Direct input port for the MTA (Message transport agent)")

    dynamic_output_port(/\w+\-\>\w+/, "/fipa/BitefficientMessage").
        doc("Output port to the MTA (Message transport agent)")

    output_port("port_stats", "std::vector<root/PortStats>").
        doc("Statistics on the messages that are processed on a specific connection")

    port_driven

    operation('rpcCreateConnectPorts').
        argument('remote_name', 'std::string').
        argument('remote_ior', 'std::string').
        returns('bool').
        doc('Creates and connects additional ports.')
end

export_types "std::vector<root/PortStats>"

if ENV['FAMOS_SYSTEM_ID']
    deployment_name = ENV['FAMOS_SYSTEM_ID']+'_'+'ROOT01'
        deployment deployment_name do
        mod = task(deployment_name, "root::Module").
            priority('10').
            periodic('0.001')

        # deprecated: 
        #mod.module_name = 'A_ROOT_1'
        mod.avahi_type = '_rimres._tcp'
        mod.avahi_port = 12000
        mod.avahi_ttl = 0

        add_default_logger
    end
end
