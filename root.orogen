name 'root'

version '0.1'
# Find documentation at http://doudou.github.com/orogen/
version '0.2'
# Switched to orogen for all modules. Because of that the
# namespace name of every module has to be unique. So, the namespace
# name will describe the module, the class name will always be 'Module'.
version '0.3'
# Based on http://www.orocos.org/dfki/orogen.

import_types_from "tasks/connections/fipa_msg_object.h"

using_library "fipa_acl"
using_library "service_discovery"
using_library "typelib"

import_types_from "base"

# Special stuff, to get the TypelibMarshallerBase.hpp header from the orogen
# template directory itself.
#if !imported?
#    typelib_marshaller = Orocos::Generation.render_template 'typekit', 'typelib', 'TypelibMarshallerBase.hpp', binding
#    Orocos::Generation.save_automatic 'tasks', 'TypelibMarshallerBase.hpp', typelib_marshaller
#    typelib_marshaller = Orocos::Generation.render_template 'typekit', 'typelib', 'TypelibMarshallerBase.cpp', binding
#    Orocos::Generation.save_automatic 'tasks', 'TypelibMarshallerBase.cpp', typelib_marshaller
#    typelib_marshaller = Orocos::Generation.render_template 'typekit', 'typelib', 'TypelibMarshaller.hpp', binding
#    Orocos::Generation.save_automatic 'tasks', 'TypelibMarshaller.hpp', typelib_marshaller
#end

task_context "Module" do
    needs_configuration

    property('module_name', 'std::string').
        doc 'Name of the module.'

    property('avahi_type', 'std::string').
        doc 'Type of the service. Default is \'_rimres._tcp\'.'

    property('avahi_port', 'int').
        doc 'Port of the service. Default is 12000.'

    property('avahi_ttl', 'int').
        doc 'Time-To-Live. Default is 0.'

    # required to use dynamic ports?
    output_port('outputPortMTS', '/fipa/BitefficientMessage').
        doc('Direct output port to the mts (message-transport-service).')
    input_port('inputPortMTS', '/fipa/BitefficientMessage').
        doc('Direct input port for the messages of the mts (message-transport-service).')

    port_driven

    # method(:rpcCreateConnectPorts).
    operation('rpcCreateConnectPorts').
	    argument('remote_name', 'std::string').
        argument('remote_ior', 'std::string').
        returns('bool').
        #runs_in_caller_thread.
	    doc('Creates and connects additional ports.')
end

deployment_name = ENV['FAMOS_SYSTEM_ID']+'_'+'ROOT01'
deployment deployment_name do
    mod = task(deployment_name, "root::Module").
        priority('10').
        periodic('0.001')
        #start
    # deprecated: 
    #mod.module_name = 'A_ROOT_1'
    mod.avahi_type = '_rimres._tcp'
    mod.avahi_port = 12000
    mod.avahi_ttl = 0

    add_default_logger
end
