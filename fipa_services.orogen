name 'fipa_services'

version '0.1'
# Find documentation at http://www.rock-robotics.org
version '0.2'
# Switched to orogen for all modules. Because of that the
# namespace name of every module has to be unique. So, the namespace
# name will describe the module, the class name will always be 'Module'.
version '0.3'
# Revised role of root element. Changed to message transport service only
version '0.4'
# Moving to fipa_services
version '0.5'

using_library "uuid"
using_library "fipa_acl"
using_library "fipa_services"
using_library "service_discovery"

import_types_from "fipa_acl/message_generator/serialized_letter.h"
import_types_from "fipa_services/ServiceDirectoryEntry.hpp"
import_types_from "fipa_services/transports/Configuration.hpp"

# The FIPA message bus relies on the application of so called MTS's
# (Message Transport Services) - mainly to allow
# for inter-robot communication.
# 
# An MTS allows to register 
# receivers and will write the information to the receivers 
# according to the receivers named in the FIPA message
#
# Warning: components should be not be started with
# the '--sd-domain' option
#
# By default the distributed service directory can be
# monitored with the following commands:
#    - service_discovery-browse _fipa_service_discovery._udp
#    - avahi-browse _fipa_service_discovery._udp
#
task_context "MessageTransportTask" do
    needs_configuration

    property("transports", "/std/vector</std/string>").
        doc("Optional list of transports that can be used for communication: UDT, TCP; default is UDT")
        
    property("known_addresses", "/std/vector</std/string>").
       doc("Complete transport addresses (IP and port) of known agents that do not support mDNS. The format is 'agentName=udt://IP:port'.")

    property("local_receivers", "/std/vector</std/string>").
       doc("Optional list of local receivers -- triggers the creation of corresponding ports at startup of this component")
        
    property("transport_configurations", "/std/vector</fipa/services/transports/Configuration>").
        doc("This property can be used to configure supported transports, i.e. to set a fixed UDT port to listen on instead of a random one. This will fail if the port is blocked.")

    input_port("letters", "/fipa/SerializedLetter").
        doc("Input port for FIPA letters, that will be routed according to the set receiver field").
        needs_reliable_connection

    dynamic_output_port(/.*/,"/fipa/SerializedLetter").
        doc("Output ports will be of the receivers name")

    port_driven

    operation("addReceiver").
        returns("bool").
        argument("receiver", "/std/string","the name of the receiver").
        argument("is_local", "bool", "flag it the receiver is a local client (in contrast to being another mts)").
        doc("Upon adding of a receiver, a new output port for this receiver is generated. Output port will be of receivers name (if successful)")

    operation("removeReceiver").
        returns("bool").
        argument("receiver", "/std/string","the name of the receiver").
        doc("Upon removal of a receiver, the corresponding output port is removed")

    operation("getReceivers").
        returns("/std/vector</std/string >").
        doc("Retrieve list of currently attached receivers")
    
    # For now the component needs to be periodic to handle the internal udt based communication
    periodic(0.01)
end

# Task that echos all incoming letters where
# protocol set to ECHO and performative to :REQUEST
# An echo is send back to the request originator and reply
# is performed with performative :INFORM message containing the incoming
# message using the same representation
task_context "EchoTask" do
    needs_configuration

    property("agent_name","/std/string").
        doc("Agent name for the echo task")

    input_port("letters","/fipa/SerializedLetter").
        doc("Input port for serialized letters")

    output_port("handled_letters","/fipa/SerializedLetter").
        doc("All handled letters with timestamp of handling")

    port_driven
end
