name 'fipa_services'

version '0.1'
# Find documentation at http://www.rock-robotics.org
version '0.2'
# Switched to orogen for all modules. Because of that the
# namespace name of every module has to be unique. So, the namespace
# name will describe the module, the class name will always be 'Module'.
version '0.3'
# Revised role of root element. Changed to message transport service only
version '0.4'
# Moving to fipa_services
version '0.5'

using_library "fipa_acl"
using_library "fipa_services"

import_types_from "fipa_acl/message_generator/serialized_letter.h"
import_types_from "fipa_services/ServiceDirectoryEntry.hpp"
import_types_from "base"

# The FIPA message bus relies on the application of so called MTS's
# (Message Transport Services) - mainly to allow
# for inter-robot communication.
# 
# One MTS per robot/environment is responsible for delivering message 
# to a set of components, here identified by an environment id as part
# which is part of the components name: <env-id>_<type>. 
#
# An MTS will be recognized by its type suffix: <env-id>_MTA, where
# the <env-id> follows <robot-type>_<id> (thus the second underscore 
# separates <env-id> and <type>, e.g. crex_0_MTA)
#
# An MTS allows to register 
# receivers and will write the information to the receivers 
# according to the receivers named in the FIPA message
#
# Warning: root modules and derived components should *NOT* be started with
# the '--sd-domain' option. Instead the property 'avahi_type' should be used, 
# to set domain and type (_udp,_tcp).
# Otherwise a runtime condition exists between receiving events from the 
# underlying service_discovery and registering callbacks for these events. 
# !! -- this requires to be fixed in upcoming versions -- !!
task_context "MessageTransportTask" do
    needs_configuration

    input_port("letters", "/fipa/SerializedLetter").
        doc("Input port for FIPA letters, that will be routed according to the set receiver field").
        needs_reliable_connection

    input_port("service_directories", "/fipa/services/ServiceDirectoryList").
        doc("Input port to retrieve service directories of other MessageTransports")

    output_port("global_service_directory", "/fipa/services/ServiceDirectoryList").
        keep_last_written_value(true).
        doc("Output port of the services this MessageTransport is directly attached to")

    output_port("local_service_directory", "/fipa/services/ServiceDirectoryList").
        keep_last_written_value(true).
        doc("Output port of the services this MessageTransport is directly attached to")

    dynamic_input_port(/\w+\-\>\w+/, "/fipa/SerializedLetter").
        doc("Direct input port for the MTA (Message transport service)")

    dynamic_output_port(/\w+\-\>\w+/, "/fipa/SerializedLetter").
        doc("Output port to the MTA (Message transport service)")

    dynamic_output_port(/.*/,"/fipa/SerializedLetter").
        doc("Output ports will be of the receivers name")

    port_driven

    operation("addReceiver").
        returns("bool").
        argument("receiver", "/std/string/","the name of the receiver").
        argument("is_local", "bool", "flag it the receiver is a local client (or another mts)").
        doc("Upon adding of a receiver, a new output port for this receiver is generated. Output port will be of receivers name (if successful)")

    operation("removeReceiver").
        returns("bool").
        argument("receiver", "/std/string/","the name of the receiver").
        doc("Upon removal of a receiver, the corresponding output port is removed")

    operation("getReceivers").
        returns("/std/vector</std/string >").
        doc("Retrieve list of currently attached receivers")
end

deployment "fipa_services_test" do
    do_not_install
    (0..4).each do |i|
        task("mts_#{i}", "fipa_services::MessageTransportTask")
    end
end
